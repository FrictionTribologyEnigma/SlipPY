{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"profile",
				"profile"
			],
			[
				"per",
				"periodic_surface"
			],
			[
				"order",
				"order"
			],
			[
				"curve",
				"curved_surface"
			],
			[
				"proper",
				"property_to_plot"
			],
			[
				"get",
				"get_fft"
			],
			[
				"dista",
				"distance_to_centre"
			],
			[
				"sq",
				"sqrt"
			],
			[
				"as",
				"asarray"
			],
			[
				"sur",
				"surf_in"
			],
			[
				"p",
				"profile"
			],
			[
				"s",
				"self"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Surface/Surface.py",
			"settings":
			{
				"buffer_size": 34530,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\"\"\"\nClasses for generating random surfaces based on filtering of random signals:\n    ===========================================================================\n    ===========================================================================\n    Each class inherits functionallity from the Surface but changes the \n    __init__ and descretise functions\n    ===========================================================================\n    ===========================================================================\n    NoiseBasedSurface:\n        Generate and filter a noisy surface, several methods for this and the \n        make_like method that makes a surface 'like' the input surface\n        \n    ===========================================================================\n    ===========================================================================\n\n#TODO:\n        Add comment blocks to each class with examples of use\n        Add other surface generation methods\n        add citation to relevent method\n        add make like method,\n        \n\"\"\"\n\nfrom . import Surface\nimport warnings\nimport numpy as np\nfrom math import ceil, floor\n\n__all__=['GausianNoiseSurface', 'make_like']\n\n\nclass GausianNoiseSurface(Surface): #done\n    is_descrete=False\n    need_to_filter=False\n    surface_type='gausianNoise'\n    def __init__(self, dimentions=2, **kwargs):\n        \n        self.init_checks(kwargs)\n        self.dimentions=dimentions\n        \n    def fill_gausian(self, spacing=False, mu=0, sigma=1):\n        #fills the profile with random gaussian numbers\n        if spacing:    \n            self.grid_size=spacing\n        self.descretise_checks()\n        nPts=self.pts_each_direction\n        if self.dimentions==1:\n            profile=np.random.randn(nPts[0],1)\n        elif self.dimentions==2:\n            profile=np.random.randn(nPts[0],nPts[1])\n        self.profile=self.profile*sigma+mu\n        self.is_descrete=True\n    \n    def johnson_translator(self, distribution, params):\n        pass\n\n    def CGM_method(self, ACF_or_type, *params):\n        pass\n\n    def beta_function_method(self, ACF_or_type, *params):\n        pass\n\n    def linear_transformation(self, ACF_or_type, *params):\n        pass\n\n    def ARMA(self, ACF_or_type, *params):\n        pass\n\n    def sparse_ferquency_domain(self, ACF, *params):\n        pass\n\n    def specify_ACF_IFFT_FIR(self, ACF_or_type, *params):\n        size=self.global_size\n        spacing=self.grid_size\n        nPts=self.pts_each_direction\n        if type(ACF_or_type) is str:\n            k=np.arange(-nPts[0]/2,nPts[0]/2)\n            l=np.arange(-nPts[1]/2,nPts[1]/2)\n            [K,L]=np.meshgrid(k,l)\n            \n            if ACF_or_type=='exp':\n                sigma=params[0]\n                beta_x=params[1]/spacing\n                beta_y=params[2]/spacing\n                ACF=sigma**2*np.exp(-2.3*np.sqrt((K/beta_x)**2+(L/beta_y)**2))\n                self.surf(ACF)\n            else:\n                ValueError(\"ACF_or_type must be array like or valid type\")\n        else:\n            ACF=np.asarray(ACF_or_type)\n            if not ACF.shape==size:\n                #pad ACF with 0s equally on both sides\n                size_difference=[]\n                is_neg=[]\n                for i in range(len(size)):\n                    size_difference.append(size[i],ACF.shape[i])\n                    is_neg.append(size_difference[0]<0)\n                if any(is_neg):\n                    ValueError(\"ACF size should be smaller than the profile\"\n                               \" size\")\n                np.pad(ACF,[ceil(size_difference[0]),floor(size_difference[0]), \n                          ceil(size_difference[0]), floor(size_difference[0])],\n                       'constant')\n        \n        filter_tf=np.sqrt(np.fft.fft2(ACF))\n        self.profile=np.abs(np.fft.ifft2((np.fft.fft2(self.profile)*filter_tf)))\n        \ndef make_like(surface, copy=True):\n    #pass a surface to init then use __call__ to generate like surfaces by the given method\n    pass\n",
			"file": "Surface/Random.py",
			"file_size": 3704,
			"file_write_time": 131811508311133146,
			"settings":
			{
				"buffer_size": 4006,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Surface/ACF.py",
			"settings":
			{
				"buffer_size": 518,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Install",
				"Package Control: Install Package"
			],
			[
				"Pyth",
				"Build With: Python"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/mike and lisa/friction_code/SlipPY",
		"/C/Users/mike and lisa/friction_code/SlipPY/Lubrication",
		"/C/Users/mike and lisa/friction_code/SlipPY/Surface"
	],
	"file_history":
	[
		"/C/Users/mike and lisa/friction_code/SlipPY/Surface/ACF.py"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"arrange",
			"ACF",
			"aacf"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Surface/Surface.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34530,
						"regions":
						{
						},
						"selection":
						[
							[
								20132,
								20132
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 384.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Surface/Random.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4006,
						"regions":
						{
						},
						"selection":
						[
							[
								2325,
								2325
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 724.8,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Surface/ACF.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 518,
						"regions":
						{
						},
						"selection":
						[
							[
								473,
								473
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 126.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "slippy.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
